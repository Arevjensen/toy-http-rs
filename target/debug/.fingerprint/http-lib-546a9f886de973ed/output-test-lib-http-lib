{"message":"unresolved import `quote`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"http-lib/src/route_macro.rs","byte_start":68,"byte_end":73,"line_start":4,"line_end":4,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use quote::quote;","highlight_start":5,"highlight_end":10}],"label":"use of undeclared crate or module `quote`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `quote`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhttp-lib/src/route_macro.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse quote::quote;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `quote`\u001b[0m\n\n"}
{"message":"cannot determine resolution for the macro `quote`","code":null,"level":"error","spans":[{"file_name":"http-lib/src/route_macro.rs","byte_start":1125,"byte_end":1130,"line_start":35,"line_end":35,"column_start":18,"column_end":23,"is_primary":true,"text":[{"text":"    let output = quote! {","highlight_start":18,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the macro `quote`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhttp-lib/src/route_macro.rs:35:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let output = quote! {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"failed to resolve: could not find `NestedMeta` in `syn`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"http-lib/src/route_macro.rs","byte_start":478,"byte_end":488,"line_start":16,"line_end":16,"column_start":14,"column_end":24,"is_primary":true,"text":[{"text":"        syn::NestedMeta::Meta(syn::Meta::NameValue(ref nv)) => {","highlight_start":14,"highlight_end":24}],"label":"could not find `NestedMeta` in `syn`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `NestedMeta` in `syn`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhttp-lib/src/route_macro.rs:16:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        syn::NestedMeta::Meta(syn::Meta::NameValue(ref nv)) => {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `NestedMeta` in `syn`\u001b[0m\n\n"}
{"message":"failed to resolve: could not find `NestedMeta` in `syn`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"http-lib/src/route_macro.rs","byte_start":828,"byte_end":838,"line_start":26,"line_end":26,"column_start":14,"column_end":24,"is_primary":true,"text":[{"text":"        syn::NestedMeta::Meta(syn::Meta::NameValue(ref nv)) => {","highlight_start":14,"highlight_end":24}],"label":"could not find `NestedMeta` in `syn`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `NestedMeta` in `syn`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhttp-lib/src/route_macro.rs:26:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        syn::NestedMeta::Meta(syn::Meta::NameValue(ref nv)) => {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `NestedMeta` in `syn`\u001b[0m\n\n"}
{"message":"cannot find type `AttributeArgs` in crate `syn`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/home/adamadam/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-2.0.15/src/macros.rs","byte_start":4147,"byte_end":4151,"line_start":161,"line_end":161,"column_start":26,"column_end":30,"is_primary":false,"text":[{"text":"        $mac!([$(#[$m])* $pub] $($t)*);","highlight_start":26,"highlight_end":30}],"label":"similarly named struct `Attribute` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/adamadam/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-2.0.15/src/macros.rs","byte_start":880,"byte_end":917,"line_start":34,"line_end":34,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        strip_attrs_pub!(ast_struct!($($t)*));","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/adamadam/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-2.0.15/src/attr.rs","byte_start":231,"byte_end":6003,"line_start":11,"line_end":171,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"ast_struct! {","highlight_start":1,"highlight_end":14},{"text":"    /// An attribute, like `#[repr(transparent)]`.","highlight_start":1,"highlight_end":51},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// <br>","highlight_start":1,"highlight_end":13},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// # Syntax","highlight_start":1,"highlight_end":17},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Rust has six types of attributes.","highlight_start":1,"highlight_end":42},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// - Outer attributes like `#[repr(transparent)]`. These appear outside or","highlight_start":1,"highlight_end":80},{"text":"    ///   in front of the item they describe.","highlight_start":1,"highlight_end":46},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// - Inner attributes like `#![feature(proc_macro)]`. These appear inside","highlight_start":1,"highlight_end":79},{"text":"    ///   of the item they describe, usually a module.","highlight_start":1,"highlight_end":55},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// - Outer one-line doc comments like `/// Example`.","highlight_start":1,"highlight_end":58},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// - Inner one-line doc comments like `//! Please file an issue`.","highlight_start":1,"highlight_end":71},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// - Outer documentation blocks `/** Example */`.","highlight_start":1,"highlight_end":55},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// - Inner documentation blocks `/*! Please file an issue */`.","highlight_start":1,"highlight_end":68},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// The `style` field of type `AttrStyle` distinguishes whether an attribute","highlight_start":1,"highlight_end":81},{"text":"    /// is outer or inner.","highlight_start":1,"highlight_end":27},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Every attribute has a `path` that indicates the intended interpretation","highlight_start":1,"highlight_end":80},{"text":"    /// of the rest of the attribute's contents. The path and the optional","highlight_start":1,"highlight_end":75},{"text":"    /// additional contents are represented together in the `meta` field of the","highlight_start":1,"highlight_end":80},{"text":"    /// attribute in three possible varieties:","highlight_start":1,"highlight_end":47},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// - Meta::Path &mdash; attributes whose information content conveys just a","highlight_start":1,"highlight_end":81},{"text":"    ///   path, for example the `#[test]` attribute.","highlight_start":1,"highlight_end":53},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// - Meta::List &mdash; attributes that carry arbitrary tokens after the","highlight_start":1,"highlight_end":78},{"text":"    ///   path, surrounded by a delimiter (parenthesis, bracket, or brace). For","highlight_start":1,"highlight_end":80},{"text":"    ///   example `#[derive(Copy)]` or `#[precondition(x < 5)]`.","highlight_start":1,"highlight_end":65},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// - Meta::NameValue &mdash; attributes with an `=` sign after the path,","highlight_start":1,"highlight_end":78},{"text":"    ///   followed by a Rust expression. For example `#[path =","highlight_start":1,"highlight_end":63},{"text":"    ///   \"sys/windows.rs\"]`.","highlight_start":1,"highlight_end":30},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// All doc comments are represented in the NameValue style with a path of","highlight_start":1,"highlight_end":79},{"text":"    /// \"doc\", as this is how they are processed by the compiler and by","highlight_start":1,"highlight_end":72},{"text":"    /// `macro_rules!` macros.","highlight_start":1,"highlight_end":31},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// ```text","highlight_start":1,"highlight_end":16},{"text":"    /// #[derive(Copy, Clone)]","highlight_start":1,"highlight_end":31},{"text":"    ///   ~~~~~~Path","highlight_start":1,"highlight_end":21},{"text":"    ///   ^^^^^^^^^^^^^^^^^^^Meta::List","highlight_start":1,"highlight_end":40},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// #[path = \"sys/windows.rs\"]","highlight_start":1,"highlight_end":35},{"text":"    ///   ~~~~Path","highlight_start":1,"highlight_end":19},{"text":"    ///   ^^^^^^^^^^^^^^^^^^^^^^^Meta::NameValue","highlight_start":1,"highlight_end":49},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// #[test]","highlight_start":1,"highlight_end":16},{"text":"    ///   ^^^^Meta::Path","highlight_start":1,"highlight_end":25},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// <br>","highlight_start":1,"highlight_end":13},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// # Parsing from tokens to Attribute","highlight_start":1,"highlight_end":43},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This type does not implement the [`Parse`] trait and thus cannot be","highlight_start":1,"highlight_end":76},{"text":"    /// parsed directly by [`ParseStream::parse`]. Instead use","highlight_start":1,"highlight_end":63},{"text":"    /// [`ParseStream::call`] with one of the two parser functions","highlight_start":1,"highlight_end":67},{"text":"    /// [`Attribute::parse_outer`] or [`Attribute::parse_inner`] depending on","highlight_start":1,"highlight_end":78},{"text":"    /// which you intend to parse.","highlight_start":1,"highlight_end":35},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [`Parse`]: parse::Parse","highlight_start":1,"highlight_end":32},{"text":"    /// [`ParseStream::parse`]: parse::ParseBuffer::parse","highlight_start":1,"highlight_end":58},{"text":"    /// [`ParseStream::call`]: parse::ParseBuffer::call","highlight_start":1,"highlight_end":56},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    /// use syn::{Attribute, Ident, Result, Token};","highlight_start":1,"highlight_end":52},{"text":"    /// use syn::parse::{Parse, ParseStream};","highlight_start":1,"highlight_end":46},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Parses a unit struct with attributes.","highlight_start":1,"highlight_end":49},{"text":"    /// //","highlight_start":1,"highlight_end":11},{"text":"    /// //     #[path = \"s.tmpl\"]","highlight_start":1,"highlight_end":34},{"text":"    /// //     struct S;","highlight_start":1,"highlight_end":25},{"text":"    /// struct UnitStruct {","highlight_start":1,"highlight_end":28},{"text":"    ///     attrs: Vec<Attribute>,","highlight_start":1,"highlight_end":35},{"text":"    ///     struct_token: Token![struct],","highlight_start":1,"highlight_end":42},{"text":"    ///     name: Ident,","highlight_start":1,"highlight_end":25},{"text":"    ///     semi_token: Token![;],","highlight_start":1,"highlight_end":35},{"text":"    /// }","highlight_start":1,"highlight_end":10},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// impl Parse for UnitStruct {","highlight_start":1,"highlight_end":36},{"text":"    ///     fn parse(input: ParseStream) -> Result<Self> {","highlight_start":1,"highlight_end":59},{"text":"    ///         Ok(UnitStruct {","highlight_start":1,"highlight_end":32},{"text":"    ///             attrs: input.call(Attribute::parse_outer)?,","highlight_start":1,"highlight_end":64},{"text":"    ///             struct_token: input.parse()?,","highlight_start":1,"highlight_end":50},{"text":"    ///             name: input.parse()?,","highlight_start":1,"highlight_end":42},{"text":"    ///             semi_token: input.parse()?,","highlight_start":1,"highlight_end":48},{"text":"    ///         })","highlight_start":1,"highlight_end":19},{"text":"    ///     }","highlight_start":1,"highlight_end":14},{"text":"    /// }","highlight_start":1,"highlight_end":10},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// <p><br></p>","highlight_start":1,"highlight_end":20},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// # Parsing from Attribute to structured arguments","highlight_start":1,"highlight_end":57},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// The grammar of attributes in Rust is very flexible, which makes the","highlight_start":1,"highlight_end":76},{"text":"    /// syntax tree not that useful on its own. In particular, arguments of the","highlight_start":1,"highlight_end":80},{"text":"    /// `Meta::List` variety of attribute are held in an arbitrary `tokens:","highlight_start":1,"highlight_end":76},{"text":"    /// TokenStream`. Macros are expected to check the `path` of the attribute,","highlight_start":1,"highlight_end":80},{"text":"    /// decide whether they recognize it, and then parse the remaining tokens","highlight_start":1,"highlight_end":78},{"text":"    /// according to whatever grammar they wish to require for that kind of","highlight_start":1,"highlight_end":76},{"text":"    /// attribute. Use [`parse_args()`] to parse those tokens into the expected","highlight_start":1,"highlight_end":80},{"text":"    /// data structure.","highlight_start":1,"highlight_end":24},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [`parse_args()`]: Attribute::parse_args","highlight_start":1,"highlight_end":48},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// <p><br></p>","highlight_start":1,"highlight_end":20},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// # Doc comments","highlight_start":1,"highlight_end":23},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// The compiler transforms doc comments, such as `/// comment` and `/*!","highlight_start":1,"highlight_end":77},{"text":"    /// comment */`, into attributes before macros are expanded. Each comment is","highlight_start":1,"highlight_end":81},{"text":"    /// expanded into an attribute of the form `#[doc = r\"comment\"]`.","highlight_start":1,"highlight_end":70},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// As an example, the following `mod` items are expanded identically:","highlight_start":1,"highlight_end":75},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    /// # use syn::{ItemMod, parse_quote};","highlight_start":1,"highlight_end":43},{"text":"    /// let doc: ItemMod = parse_quote! {","highlight_start":1,"highlight_end":42},{"text":"    ///     /// Single line doc comments","highlight_start":1,"highlight_end":41},{"text":"    ///     /// We write so many!","highlight_start":1,"highlight_end":34},{"text":"    ///     /**","highlight_start":1,"highlight_end":16},{"text":"    ///      * Multi-line comments...","highlight_start":1,"highlight_end":38},{"text":"    ///      * May span many lines","highlight_start":1,"highlight_end":35},{"text":"    ///      */","highlight_start":1,"highlight_end":16},{"text":"    ///     mod example {","highlight_start":1,"highlight_end":26},{"text":"    ///         //! Of course, they can be inner too","highlight_start":1,"highlight_end":53},{"text":"    ///         /*! And fit in a single line */","highlight_start":1,"highlight_end":48},{"text":"    ///     }","highlight_start":1,"highlight_end":14},{"text":"    /// };","highlight_start":1,"highlight_end":11},{"text":"    /// let attr: ItemMod = parse_quote! {","highlight_start":1,"highlight_end":43},{"text":"    ///     #[doc = r\" Single line doc comments\"]","highlight_start":1,"highlight_end":50},{"text":"    ///     #[doc = r\" We write so many!\"]","highlight_start":1,"highlight_end":43},{"text":"    ///     #[doc = r\"","highlight_start":1,"highlight_end":23},{"text":"    ///      * Multi-line comments...","highlight_start":1,"highlight_end":38},{"text":"    ///      * May span many lines","highlight_start":1,"highlight_end":35},{"text":"    ///      \"]","highlight_start":1,"highlight_end":16},{"text":"    ///     mod example {","highlight_start":1,"highlight_end":26},{"text":"    ///         #![doc = r\" Of course, they can be inner too\"]","highlight_start":1,"highlight_end":63},{"text":"    ///         #![doc = r\" And fit in a single line \"]","highlight_start":1,"highlight_end":56},{"text":"    ///     }","highlight_start":1,"highlight_end":14},{"text":"    /// };","highlight_start":1,"highlight_end":11},{"text":"    /// assert_eq!(doc, attr);","highlight_start":1,"highlight_end":31},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    #[cfg_attr(doc_cfg, doc(cfg(any(feature = \"full\", feature = \"derive\"))))]","highlight_start":1,"highlight_end":78},{"text":"    pub struct Attribute {","highlight_start":1,"highlight_end":27},{"text":"        pub pound_token: Token![#],","highlight_start":1,"highlight_end":36},{"text":"        pub style: AttrStyle,","highlight_start":1,"highlight_end":30},{"text":"        pub bracket_token: token::Bracket,","highlight_start":1,"highlight_end":43},{"text":"        pub meta: Meta,","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"ast_struct!","def_site_span":{"file_name":"/home/adamadam/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-2.0.15/src/macros.rs","byte_start":112,"byte_end":135,"line_start":5,"line_end":5,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! ast_struct {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"strip_attrs_pub!","def_site_span":{"file_name":"/home/adamadam/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-2.0.15/src/macros.rs","byte_start":3988,"byte_end":4016,"line_start":157,"line_end":157,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! strip_attrs_pub {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"http-lib/src/route_macro.rs","byte_start":329,"byte_end":342,"line_start":10,"line_end":10,"column_start":48,"column_end":61,"is_primary":true,"text":[{"text":"    let args = parse_macro_input!(args as syn::AttributeArgs);","highlight_start":48,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"http-lib/src/route_macro.rs","byte_start":329,"byte_end":342,"line_start":10,"line_end":10,"column_start":48,"column_end":61,"is_primary":true,"text":[{"text":"    let args = parse_macro_input!(args as syn::AttributeArgs);","highlight_start":48,"highlight_end":61}],"label":null,"suggested_replacement":"Attribute","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `AttributeArgs` in crate `syn`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhttp-lib/src/route_macro.rs:10:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let args = parse_macro_input!(args as syn::AttributeArgs);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `Attribute`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/adamadam/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-2.0.15/src/attr.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mast_struct! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// An attribute, like `#[repr(transparent)]`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// <br>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `Attribute` defined here\u001b[0m\n\n"}
{"message":"unused imports: `FnArg`, `PatType`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"http-lib/src/route_macro.rs","byte_start":111,"byte_end":116,"line_start":5,"line_end":5,"column_start":30,"column_end":35,"is_primary":true,"text":[{"text":"use syn::{parse_macro_input, FnArg, ItemFn, PatType};","highlight_start":30,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"http-lib/src/route_macro.rs","byte_start":126,"byte_end":133,"line_start":5,"line_end":5,"column_start":45,"column_end":52,"is_primary":true,"text":[{"text":"use syn::{parse_macro_input, FnArg, ItemFn, PatType};","highlight_start":45,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"http-lib/src/route_macro.rs","byte_start":109,"byte_end":116,"line_start":5,"line_end":5,"column_start":28,"column_end":35,"is_primary":true,"text":[{"text":"use syn::{parse_macro_input, FnArg, ItemFn, PatType};","highlight_start":28,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"http-lib/src/route_macro.rs","byte_start":124,"byte_end":133,"line_start":5,"line_end":5,"column_start":43,"column_end":52,"is_primary":true,"text":[{"text":"use syn::{parse_macro_input, FnArg, ItemFn, PatType};","highlight_start":43,"highlight_end":52}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `FnArg`, `PatType`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhttp-lib/src/route_macro.rs:5:30\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse syn::{parse_macro_input, FnArg, ItemFn, PatType};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused imports: `fs`, `thread`, `time::Duration`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"http-lib/src/lib.rs","byte_start":157,"byte_end":159,"line_start":9,"line_end":9,"column_start":11,"column_end":13,"is_primary":true,"text":[{"text":"use std::{fs, io::prelude::*, thread, time::Duration};","highlight_start":11,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"http-lib/src/lib.rs","byte_start":177,"byte_end":183,"line_start":9,"line_end":9,"column_start":31,"column_end":37,"is_primary":true,"text":[{"text":"use std::{fs, io::prelude::*, thread, time::Duration};","highlight_start":31,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"http-lib/src/lib.rs","byte_start":185,"byte_end":199,"line_start":9,"line_end":9,"column_start":39,"column_end":53,"is_primary":true,"text":[{"text":"use std::{fs, io::prelude::*, thread, time::Duration};","highlight_start":39,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"http-lib/src/lib.rs","byte_start":157,"byte_end":161,"line_start":9,"line_end":9,"column_start":11,"column_end":15,"is_primary":true,"text":[{"text":"use std::{fs, io::prelude::*, thread, time::Duration};","highlight_start":11,"highlight_end":15}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"http-lib/src/lib.rs","byte_start":175,"byte_end":199,"line_start":9,"line_end":9,"column_start":29,"column_end":53,"is_primary":true,"text":[{"text":"use std::{fs, io::prelude::*, thread, time::Duration};","highlight_start":29,"highlight_end":53}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `fs`, `thread`, `time::Duration`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhttp-lib/src/lib.rs:9:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::{fs, io::prelude::*, thread, time::Duration};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `BufReader`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"http-lib/src/lib.rs","byte_start":248,"byte_end":257,"line_start":11,"line_end":11,"column_start":46,"column_end":55,"is_primary":true,"text":[{"text":"use tokio::io::{AsyncReadExt, AsyncWriteExt, BufReader};","highlight_start":46,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"http-lib/src/lib.rs","byte_start":246,"byte_end":257,"line_start":11,"line_end":11,"column_start":44,"column_end":55,"is_primary":true,"text":[{"text":"use tokio::io::{AsyncReadExt, AsyncWriteExt, BufReader};","highlight_start":44,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `BufReader`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhttp-lib/src/lib.rs:11:46\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse tokio::io::{AsyncReadExt, AsyncWriteExt, BufReader};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `TcpStream`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"http-lib/src/lib.rs","byte_start":290,"byte_end":299,"line_start":12,"line_end":12,"column_start":31,"column_end":40,"is_primary":true,"text":[{"text":"use tokio::net::{TcpListener, TcpStream};","highlight_start":31,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"http-lib/src/lib.rs","byte_start":288,"byte_end":299,"line_start":12,"line_end":12,"column_start":29,"column_end":40,"is_primary":true,"text":[{"text":"use tokio::net::{TcpListener, TcpStream};","highlight_start":29,"highlight_end":40}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `TcpStream`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhttp-lib/src/lib.rs:12:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse tokio::net::{TcpListener, TcpStream};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `Sender`, `channel`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"http-lib/src/lib.rs","byte_start":326,"byte_end":333,"line_start":13,"line_end":13,"column_start":25,"column_end":32,"is_primary":true,"text":[{"text":"use tokio::sync::mpsc::{channel, Sender};","highlight_start":25,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"http-lib/src/lib.rs","byte_start":335,"byte_end":341,"line_start":13,"line_end":13,"column_start":34,"column_end":40,"is_primary":true,"text":[{"text":"use tokio::sync::mpsc::{channel, Sender};","highlight_start":34,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"http-lib/src/lib.rs","byte_start":302,"byte_end":343,"line_start":13,"line_end":13,"column_start":1,"column_end":42,"is_primary":true,"text":[{"text":"use tokio::sync::mpsc::{channel, Sender};","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Sender`, `channel`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhttp-lib/src/lib.rs:13:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse tokio::sync::mpsc::{channel, Sender};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}
{"message":"no field `lit` on type `&MetaNameValue`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"http-lib/src/route_macro.rs","byte_start":552,"byte_end":555,"line_start":17,"line_end":17,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"            match &nv.lit {","highlight_start":23,"highlight_end":26}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `path`, `eq_token`, `value`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `lit` on type `&MetaNameValue`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhttp-lib/src/route_macro.rs:17:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match &nv.lit {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `path`, `eq_token`, `value`\u001b[0m\n\n"}
{"message":"no field `lit` on type `&MetaNameValue`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"http-lib/src/route_macro.rs","byte_start":902,"byte_end":905,"line_start":27,"line_end":27,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"            match &nv.lit {","highlight_start":23,"highlight_end":26}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `path`, `eq_token`, `value`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `lit` on type `&MetaNameValue`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhttp-lib/src/route_macro.rs:27:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match &nv.lit {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `path`, `eq_token`, `value`\u001b[0m\n\n"}
{"message":"unused import: `io::prelude`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"http-lib/src/lib.rs","byte_start":161,"byte_end":172,"line_start":9,"line_end":9,"column_start":15,"column_end":26,"is_primary":true,"text":[{"text":"use std::{fs, io::prelude::*, thread, time::Duration};","highlight_start":15,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `io::prelude`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhttp-lib/src/lib.rs:9:15\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::{fs, io::prelude::*, thread, time::Duration};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to 7 previous errors; 6 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 7 previous errors; 6 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0412, E0432, E0433, E0609.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0412, E0432, E0433, E0609.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0412`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0412`.\u001b[0m\n"}
